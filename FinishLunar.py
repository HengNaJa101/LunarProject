import psycopg2
from datetime import datetime
import os
import sys
import signal
import time
import logging

# ตั้งค่า encoding สำหรับ Windows
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    # ตั้งค่า console encoding
    os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

# ตั้งค่า logging สำหรับ PM2
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ตัวแปรสำหรับควบคุมการทำงาน
running = True

def signal_handler(signum, frame):
    """จัดการ signal สำหรับการหยุดทำงานอย่างสุภาพ"""
    global running
    logger.info(f"Received signal {signum}, shutting down gracefully...")
    running = False

# ลงทะเบียน signal handlers
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# ข้อมูลการเชื่อมต่อฐานข้อมูล
DB_CONFIG = {
    'host': 'Chainchinjung.3bbddns.com',
    'port': 57721,
    'database': 'thai-hub',
    'user': 'thaiHub',
    'password': 'thaiHubPassword'
}

def test_database_connection():
    """
    ทดสอบการเชื่อมต่อฐานข้อมูล PostgreSQL
    """
    try:
        print("=== ทดสอบการเชื่อมต่อฐานข้อมูล ===")
        print(f"Host: {DB_CONFIG['host']}")
        print(f"Port: {DB_CONFIG['port']}")
        print(f"Database: {DB_CONFIG['database']}")
        print(f"User: {DB_CONFIG['user']}")
        print("กำลังเชื่อมต่อ...")
        
        # เชื่อมต่อฐานข้อมูล
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("[OK] เชื่อมต่อฐานข้อมูลสำเร็จ!")
        
        # ทดสอบ query ง่ายๆ
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"[OK] PostgreSQL Version: {version[0]}")
        
        # ตรวจสอบตาราง
        cursor.execute("SELECT COUNT(*) FROM thai_lunar_calendar;")
        count = cursor.fetchone()
        print(f"[OK] จำนวนข้อมูลในตาราง thai_lunar_calendar: {count[0]} แถว")
        
        conn.close()
        print("[OK] ปิดการเชื่อมต่อเรียบร้อย")
        return True
        
    except psycopg2.OperationalError as e:
        print(f"[ERROR] ข้อผิดพลาดการเชื่อมต่อ: {e}")
        return False
    except psycopg2.Error as e:
        print(f"[ERROR] ข้อผิดพลาด PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"[ERROR] ข้อผิดพลาดทั่วไป: {e}")
        return False

def convert_thai_lunar_month_to_number(เดือนจันทรคติ_ชื่อ):
    """
    แปลงชื่อเดือนจันทรคติไทยเป็นตัวเลข
    รองรับรูปแบบต่างๆ จากฐานข้อมูล
    """
    เดือน_แปลง = {
        # รูปแบบเดิม
        "เดือน1": 1,     "เดือน2": 2,     "เดือน3": 3,     "เดือน4": 4,
        "เดือน5": 5,     "เดือน6": 6,     "เดือน7": 7,     "เดือน8": 8,
        "เดือน9": 9,     "เดือน10": 10,   "เดือน11": 11,   "เดือน12": 12,
        
        # รูปแบบจากฐานข้อมูล (เดือนไทยดั้งเดิม)
        "เดือนอ้าย": 1,          # เดือน 1
        "เดือนยี่": 2,           # เดือน 2
        "เดือนสาม": 3,          # เดือน 3
        "เดือนสี่": 4,           # เดือน 4
        "เดือนห้า": 5,          # เดือน 5
        "เดือนหก": 6,           # เดือน 6
        "เดือนเจ็ด": 7,         # เดือน 7
        "เดือนแปด": 8,          # เดือน 8
        "เดือนแปดหลัง": 8,      # เดือน 8 หลัง (ปีอธิกสุรทิน)
        "เดือนเก้า": 9,         # เดือน 9
        "เดือนสิบ": 10,         # เดือน 10
        "เดือนสิบเอ็ด": 11,     # เดือน 11
        "เดือนสิบสอง": 12,      # เดือน 12
    }
    
    return เดือน_แปลง.get(เดือนจันทรคติ_ชื่อ, 1)  # ถ้าไม่พบให้ใช้เดือน 1

def calculate_age(birth_year, birth_month, birth_day):
    """
    คำนวณอายุจากวันเกิดเปรียบเทียบกับปัจจุบัน แบบละเอียด (ปี เดือน วัน)
    """
    today = datetime.now()
    # แปลง พ.ศ. เป็น ค.ศ.
    birth_year_ad = birth_year - 543
    
    birth_date = datetime(birth_year_ad, birth_month, birth_day)
    
    # คำนวณอายุแบบละเอียด
    years = today.year - birth_date.year
    months = today.month - birth_date.month
    days = today.day - birth_date.day
    
    # ปรับค่าถ้าวันหรือเดือนติดลบ
    if days < 0:
        months -= 1
        # หาจำนวนวันในเดือนก่อนหน้า
        if today.month == 1:
            prev_month_days = (datetime(today.year - 1, 12, 1) - datetime(today.year - 1, 11, 1)).days
        else:
            prev_month_days = (datetime(today.year, today.month, 1) - datetime(today.year, today.month - 1, 1)).days
        days += prev_month_days
    
    if months < 0:
        years -= 1
        months += 12
    
    return {"years": years, "months": months, "days": days}

def get_day_name(วันเลข):
    """
    แปลงตัวเลขวันเป็นชื่อวันในสัปดาห์
    1=วันอาทิตย์, 2=วันจันทร์, 3=วันอังคาร, 4=วันพุธ, 5=วันพฤหัสบดี, 6=วันศุกร์, 7=วันเสาร์
    """
    วัน_ไทย = {
        1: "วันอาทิตย์",
        2: "วันจันทร์", 
        3: "วันอังคาร",
        4: "วันพุธ",
        5: "วันพฤหัสบดี",
        6: "วันศุกร์",
        7: "วันเสาร์"
    }
    return วัน_ไทย.get(วันเลข, f"วัน{วันเลข}")

def convert_lunar_day_full(วันจันทรคติ):
    """
    แปลงวันจันทรคติจากรูปแบบย่อ เป็นรูปแบบเต็ม
    เช่น "ข 10" -> "ข้างขึ้น 10 ค่ำ", "ร 5" -> "ข้างแรม 5 ค่ำ"
    """
    try:
        if 'ข' in วันจันทรคติ:  # ข้างขึ้น
            วันที่ = วันจันทรคติ.split()[1]
            return f"ข้างขึ้น {วันที่} ค่ำ"
        elif 'ร' in วันจันทรคติ:  # ข้างแรม
            วันที่ = วันจันทรคติ.split()[1]
            return f"ข้างแรม {วันที่} ค่ำ"
        else:
            # ถ้าไม่มีข้อมูลข้างขึ้น/แรม ส่งกลับค่าเดิม
            return วันจันทรคติ
    except:
        return วันจันทรคติ

def get_lunar_month_name(เดือนจันทรคติ, ปี_พศ=None):
    """
    แปลงเลขเดือนจันทรคติเป็นชื่อเดือนจันทรคติไทย
    ถ้าเป็นปีอธิกสุรทิน (กุมภาพันธ์ 29 วัน) และเป็นเดือน 8 จะแสดงเป็น "88"
    """
    เดือนจันทรคติ_ไทย = {
        1: "เดือน 1",
        2: "เดือน 2", 
        3: "เดือน 3",
        4: "เดือน 4",
        5: "เดือน 5",
        6: "เดือน 6",
        7: "เดือน 7",
        8: "เดือน 8",
        9: "เดือน 9",
        10: "เดือน 10",
        11: "เดือน 11",
        12: "เดือน 12"
    }
    
    # ตรวจสอบเงื่อนไขพิเศษสำหรับปีอธิกสุรทิน
    if ปี_พศ is not None and int(เดือนจันทรคติ) == 8 and is_leap_year(ปี_พศ):
        return "เดือน 88"
    
    return เดือนจันทรคติ_ไทย.get(int(เดือนจันทรคติ), f"เดือน {เดือนจันทรคติ}")

def is_leap_year(ปี_พศ):
    """
    ตรวจสอบว่าเป็นปีอธิกสุรทิน (Leap Year) หรือไม่
    ปีอธิกสุรทิน = กุมภาพันธ์มี 29 วัน
    """
    # แปลง พ.ศ. เป็น ค.ศ.
    ปี_คศ = ปี_พศ - 543
    
    # กฎการคำนวณปีอธิกสุรทิน
    if ปี_คศ % 400 == 0:
        return True
    elif ปี_คศ % 100 == 0:
        return False
    elif ปี_คศ % 4 == 0:
        return True
    else:
        return False

def get_month_from_element(ธาตุ):
    """
    แปลงธาตุกลับเป็นเดือนพื้นฐาน (ใช้เดือนแรกของธาตุนั้นๆ)
    ธาตุดิน = เดือน 1,2,3 -> ใช้เดือน 1
    ธาตุไฟ = เดือน 4,5,6 -> ใช้เดือน 4  
    ธาตุลม = เดือน 7,8,9 -> ใช้เดือน 7
    ธาตุน้ำ = เดือน 10,11,12 -> ใช้เดือน 10
    """
    if ธาตุ == "ธาตุดิน":
        return 1
    elif ธาตุ == "ธาตุไฟ":
        return 4
    elif ธาตุ == "ธาตุลม":
        return 7
    elif ธาตุ == "ธาตุน้ำ":
        return 10
    else:
        return 1  # ค่าเริ่มต้น

def get_element_level(สมมุติฐาน):
    """
    หาระดับธาตุ (ต้น/หย่อน/พิการ) จากสมมุติฐาน
    ตามคอนเซ็ปที่กำหนด:
    - ไฟ: พัทธะปิตตะระคน=ไฟต้น, อพัทธะปิตตะระคน=ไฟหย่อน, กำเดาระคน=ไฟพิการ
    - ลม: หทัยวาตะระคน=ลมต้น, สัตถกะวาตะระคน=ลมหย่อน, สุมนาวาตะระคน=ลมพิการ  
    - น้ำ: ศอเสมหะระคน=น้ำต้น, อุระเสมหะระคน=น้ำหย่อน, คูถเสมหะระคน=น้ำพิการ
    - ดิน: หทัยวัตถุระคน=ดินต้น, อุทริยะระคน=ดินหย่อน, กรีสะระคน=ดินพิการ
    """
    element_levels = {
        # ไฟ
        "พัทธะปิตตะระคน": "ไฟต้น",
        "อพัทธะปิตตะระคน": "ไฟหย่อน", 
        "กำเดาระคน": "ไฟพิการ",
        
        # ลม  
        "หทัยวาตะระคน": "ลมต้น",
        "สัตถกะวาตะระคน": "ลมหย่อน",
        "สุมนาวาตะระคน": "ลมพิการ",
        
        # น้ำ
        "ศอเสมหะระคน": "น้ำต้น",
        "อุระเสมหะระคน": "น้ำหย่อน", 
        "คูถเสมหะระคน": "น้ำพิการ",
        
        # ดิน
        "หทัยวัตถุระคน": "ดินต้น",
        "อุทริยะระคน": "ดินหย่อน", 
        "กรีสะระคน": "ดินพิการ"
    }
    
    return element_levels.get(สมมุติฐาน, "ไม่ระบุ")

def get_hypothesis_from_lunar_calendar(เดือนจันทรคติ, วันจันทรคติ):
    """
    หาสมมุติฐานจากเดือนจันทรคติและข้างขึ้น/ข้างแรม
    โดยอ้างอิงตามข้อมูลจันทรคติไทย
    """
    # ตรวจสอบข้างขึ้น/ข้างแรมจากข้อมูลในไฟล์
    ข้างขึ้น = False
    if 'ข' in วันจันทรคติ:  # ข้างขึ้น
        ข้างขึ้น = True
    elif 'ร' in วันจันทรคติ:  # ข้างแรม
        ข้างขึ้น = False
    
    # ปรับเดือนให้อยู่ในช่วง 1-12
    while เดือนจันทรคติ > 12:
        เดือนจันทรคติ -= 12
    while เดือนจันทรคติ < 1:
        เดือนจันทรคติ += 12
    
    # ข้อมูลสมมุติฐานตามเดือนจันทรคติและข้างขึ้น/ข้างแรม
    lunar_month_characteristics = {
        1: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "กำเดาระคน",
                "แปรผล": "ระบบการทรงตัว น้ำในหู ไมเกรน",
                "ธาตุ": "ธาตุน้ำ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "กรีสะระคน",
                "แปรผล": "ระบบขับถ่าย ท้องผูก ปวดหัว มึนหัว",
                "ธาตุ": "ธาตุดิน"
            }
        },
        2: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "กรีสะระคน",
                "แปรผล": "ระบบขับถ่าย ท้องผูก ปวดหัว มึนหัว",
                "ธาตุ": "ธาตุดิน"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "สุมนาวาตะระคน",
                "แปรผล": "ระบบความดันโลหิต ปวดหลัง ปวดเอว",
                "ธาตุ": "ธาตุดิน"
            }
        },
        3: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "สุมนาวาตะระคน",
                "แปรผล": "ระบบความดันโลหิต ปวดหลัง ปวดเอว",
                "ธาตุ": "ธาตุดิน"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "คูถเสมหะระคน",
                "แปรผล": "ระบบขับถ่าย ระบบปัสสาวะ ระบบสืบพันธุ์",
                "ธาตุ": "ธาตุดิน"
            }
        },
        4: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "คูถเสมหะระคน",
                "แปรผล": "ระบบขับถ่าย ระบบปัสสาวะ ระบบสืบพันธุ์",
                "ธาตุ": "ธาตุดิน"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "พัทธะปิตตะระคน",
                "แปรผล": "ระบบตับ ถุงน้ำดี ตัวเหลืองตาเหลือง",
                "ธาตุ": "ธาตุไฟ"
            }
        },
        5: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "พัทธะปิตตะระคน",
                "แปรผล": "ระบบตับ ถุงน้ำดี ตัวเหลืองตาเหลือง",
                "ธาตุ": "ธาตุไฟ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "หทัยวัตถุระคน",
                "แปรผล": "ระบบหัวใจ อารมณ์ อ่อนแรง",
                "ธาตุ": "ธาตุไฟ"
            }
        },
        6: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "หทัยวัตถุระคน",
                "แปรผล": "ระบบหัวใจ อารมณ์ อ่อนแรง",
                "ธาตุ": "ธาตุไฟ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "หทัยวาตะระคน",
                "แปรผล": "การเต้นของหัวใจ ความวิตกกังวล",
                "ธาตุ": "ธาตุไฟ"
            }
        },
        7: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "หทัยวาตะระคน",
                "แปรผล": "การเต้นของหัวใจ ความวิตกกังวล",
                "ธาตุ": "ธาตุไฟ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "ศอเสมหะระคน",
                "แปรผล": "ระบบทางเดินหายใจส่วนต้น ภูมิแพ้",
                "ธาตุ": "ธาตุลม"
            }
        },
        8: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "ศอเสมหะระคน",
                "แปรผล": "ระบบทางเดินหายใจส่วนต้น ภูมิแพ้",
                "ธาตุ": "ธาตุลม"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "อพัทธะปิตตะระคน",
                "แปรผล": "ระบบย่อยอาหาร น้ำเหลือง โลหิต",
                "ธาตุ": "ธาตุลม"
            }
        },
        9: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "อพัทธะปิตตะระคน",
                "แปรผล": "ระบบย่อยอาหาร น้ำเหลือง โลหิต",
                "ธาตุ": "ธาตุลม"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "อุทริยะระคน",
                "แปรผล": "ระบบลำไส้ กระเพาะอาหาร",
                "ธาตุ": "ธาตุลม"
            }
        },
        10: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "อุทริยะระคน",
                "แปรผล": "ระบบลำไส้ กระเพาะอาหาร",
                "ธาตุ": "ธาตุลม"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "สัตถกะวาตะระคน",
                "แปรผล": "ระบบหัวใจ เส้นเลือดฝอย",
                "ธาตุ": "ธาตุน้ำ"
            }
        },
        11: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "สัตถกะวาตะระคน",
                "แปรผล": "ระบบหัวใจ เส้นเลือดฝอย",
                "ธาตุ": "ธาตุน้ำ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "อุระเสมหะระคน",
                "แปรผล": "ระบบปอด หอบหืด ภูมิแพ้",
                "ธาตุ": "ธาตุน้ำ"
            }
        },
        12: {
            "ข้างขึ้น": {
                "สมมุติฐาน": "อุระเสมหะระคน",
                "แปรผล": "ระบบปอด หอบหืด ภูมิแพ้",
                "ธาตุ": "ธาตุน้ำ"
            },
            "ข้างแรม": {
                "สมมุติฐาน": "กำเดาระคน",
                "แปรผล": "ระบบการทรงตัว น้ำในหู ไมเกรน",
                "ธาตุ": "ธาตุน้ำ"
            }
        }
    }
    
    # เลือกข้อมูลตามข้างขึ้น/ข้างแรม
    ข้างคำ = "ข้างขึ้น" if ข้างขึ้น else "ข้างแรม"
    
    if เดือนจันทรคติ in lunar_month_characteristics:
        return lunar_month_characteristics[เดือนจันทรคติ][ข้างคำ]
    else:
        return {
            "สมมุติฐาน": "ไม่ระบุ",
            "แปรผล": "ไม่ระบุ",
            "ธาตุ": "ธาตุดิน"
        }

def get_lunar_data_from_database(ปีเกิด, เดือน, วันที่):
    """
    ดึงข้อมูลจันทรคติจากฐานข้อมูล PostgreSQL
    """
    try:
        # เชื่อมต่อฐานข้อมูล
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # ค้นหาข้อมูลจากฐานข้อมูล
        query = '''
            SELECT zodiac_year, year, month, day, weekday, lunar_day, solar_day
            FROM thai_lunar_calendar 
            WHERE year = %s AND month = %s AND day = %s
        '''
        
        cursor.execute(query, (ปีเกิด, เดือน, วันที่))
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return None
        
        # แยกข้อมูลที่ได้
        ปีนักษัตร, ปีพศ, เดือน_db, วัน_db, วันในสัปดาห์, วันจันทรคติ, เดือนจันทรคติ = result
        
        return {
            "ปีนักษัตร": ปีนักษัตร,
            "วันในสัปดาห์": วันในสัปดาห์,
            "วันจันทรคติ": วันจันทรคติ,
            "เดือนจันทรคติ": เดือนจันทรคติ
        }
        
    except Exception as e:
        print(f"ข้อผิดพลาดในการเชื่อมต่อฐานข้อมูล: {e}")
        return None

def get_planetary_day_info(วันในสัปดาห์_num, ช่วงเวลา="กลางวัน"):
    """
    แปลงวันในสัปดาห์เป็นข้อมูลดาวประจำวัน
    1=อาทิตย์, 2=จันทร์, 3=อังคาร, 4=พุธ, 5=พฤหัสบดี, 6=ศุกร์, 7=เสาร์
    """
    planetary_mapping = {
        1: "ดาวอาทิตย์",
        2: "ดาวจันทร์", 
        3: "ดาวอังคาร",
        4: "ดาวพุธ" if ช่วงเวลา == "กลางวัน" else "ดาวราหู",  # พุธกลางคืน = ราหู
        5: "ดาวพฤหัสบดี",
        6: "ดาวศุกร์",
        7: "ดาวเสาร์"
    }
    return planetary_mapping.get(วันในสัปดาห์_num, "ไม่ระบุ")

def get_planetary_health_characteristics(ดาว):
    """
    ข้อมูลลักษณะสุขภาพตามดาวประจำวัน
    """
    planetary_health = {
        "ดาวอาทิตย์": {
            "อวัยวะหลัก": "หัวใจ ระบบหัวใจและหลอดเลือด",
            "โรคที่เกี่ยวข้อง": "หัวใจ ความดัน โรคหัวใจ หลอดเลือด เลือดจาง โคเลสเตอรอล ไขมันในเส้นเลือด โรคติดจังหวะการเต้นของหัวใจ"
        },
        "ดาวจันทร์": {
            "อวัยวะหลัก": "ใบหน้า ระบบสืบพันธุ์หญิง ระบบน้ำเหลือง",
            "โรคที่เกี่ยวข้อง": "ใบหน้า ภูมิแพ้ ทางจมูก ไซนัส น้ำลายเสีย รังไข่ เรือนรังมดลูก ปีกมดลูก เบาหวาน ระบบน้ำเหลือง ต่อมน้ำเหลืองในร่างกาย ผู้หญิงก่อนมีประจำเดือน (วัยเจริญพันธุ์)"
        },
        "ดาวอังคาร": {
            "อวัยวะหลัก": "ระบบทางเดินหายใจ อวัยวะเพศชาย กล้ามเนื้อ",
            "โรคที่เกี่ยวข้อง": "มูก ภูมิแพ้ ไซนัส ปัสสาวะไม่ดี กล้ามเนื้อ หลอดลม เลือดออกรุนแรง อวัยวะเพศชาย ห้อย ต่อมลูกหมาก น้ำเชื้อชาย"
        },
        "ดาวพุธ": {
            "อวัยวะหลัก": "ช่องปาก ระบบทางเดินอาหาร สมองส่วนคิด แขนมือ",
            "โรคที่เกี่ยวข้อง": "ปาก หรืออวัยวะในช่องปาก ฟัน ระบบทางเดินอาหาร หลอดอาหาร ปากนกกระจอก โรคกระเพาะอาหาร ลำไส้ แขนชา นิ้วชา ไปสู่อัมพฤกษ์ อัมพาต แขน นิ้วมือ สมอง (ส่วนคิด) โรคสีความทวาร"
        },
        "ดาวพฤหัสบดี": {
            "อวัยวะหลัก": "หู สมองส่วนจำ เท้า ตับ ระบบทรงตัว",
            "โรคที่เกี่ยวข้อง": "หู กล้ามเนื้อ สมอง (ส่วนจำ) เท้า นิ้วเท้า ตัวปรับสมดุลย์ (การทรงตัวของหู) สร้างความต้านทาน ตับ เอาโรคต่างๆของดาวอื่นที่ใหญ่ๆมา"
        },
        "ดาวศุกร์": {
            "อวัยวะหลัก": "ผิวหนัง อวัยวะเพศหญิง ไต ปอด คอ",
            "โรคที่เกี่ยวข้อง": "ผิวหนัง อวัยวะเพศหญิง ระบบสืบพันธุ์ มดลูก รังไข่ ไตปอด หน้าอก แก้ม คาง คอ ผู้หญิงที่เสียซ้ำซากตั้งแต่ปัสสาวะ นิ่ว ไทรอยด์ (บางตำรา)มดลูกไม่เปิด (ล่าช้า) เบาหวาน"
        },
        "ดาวเสาร์": {
            "อวัยวะหลัก": "กระดูก กระดูกสันหลัง ระบบประสาท",
            "โรคที่เกี่ยวข้อง": "กระดูก กระดูกโครงสร้าง อวัยวะที่ยาวๆ เช่น กระดูกสันหลัง แขน ขา ปวดหลัง ปวดแขน ปวดขา ท้องผูก ระบบประสาท โรคระยะยาว มะเร็งไขข้อ โรคเรื้อรัง และพาร์กินสัน"
        },
        "ดาวราหู": {
            "อวัยวะหลัก": "ระบบต่อมไร้ท่อ ระบบภูมิคุ้มกัน",
            "โรคที่เกี่ยวข้อง": "ฮอร์โมน ระบบต่อมไร้ท่อ พิษ/เชื้อผิดเลือดขาว เนื้องอก เอดส์ มะเร็ง สิ่งแปลกปลอม โรคที่พัฒนาขึ้นมาใหม่ๆ"
        }
    }
    
    return planetary_health.get(ดาว, {
        "อวัยวะหลัก": "ไม่ระบุ",
        "โรคที่เกี่ยวข้อง": "ไม่ระบุ"
    })

def calculate_thai_lunar_calendar(ปีเกิด, เดือน_เลข, วันที่, อายุครรภ์, ช่วงเวลา="กลางวัน"):
    """
    คำนวณข้อมูลจันทรคติไทยแบบสมบูรณ์
    
    Args:
        ปีเกิด: ปี พ.ศ.
        เดือน_เลข: เดือน (1-12)
        วันที่: วันที่ (1-31)
        อายุครรภ์: อายุครรภ์ในเดือน (7, 8, 9)
        ช่วงเวลา: "กลางวัน" (00:00-18:00) หรือ "กลางคืน" (18:00-24:00)
    
    Returns:
        str: ผลลัพธ์การคำนวณ
    """
    # แปลงเลขเดือนเป็นชื่อเดือนไทย
    เดือน_ไทย = {
        1: "มกราคม", 2: "กุมภาพันธ์", 3: "มีนาคม", 4: "เมษายน",
        5: "พฤษภาคม", 6: "มิถุนายน", 7: "กรกฎาคม", 8: "สิงหาคม",
        9: "กันยายน", 10: "ตุลาคม", 11: "พฤศจิกายน", 12: "ธันวาคม"
    }
    
    เดือน = เดือน_ไทย[เดือน_เลข]
    
    # ดึงข้อมูลจากฐานข้อมูล
    lunar_data = get_lunar_data_from_database(ปีเกิด, เดือน, วันที่)
    
    if not lunar_data:
        return f"ไม่พบข้อมูลวันที่ {วันที่} {เดือน} พ.ศ. {ปีเกิด} ในฐานข้อมูล"
    
    # แปลงข้อมูลที่ได้
    ปีนักษัตร = lunar_data["ปีนักษัตร"]
    วันในสัปดาห์ = lunar_data["วันในสัปดาห์"]
    วันจันทรคติ = lunar_data["วันจันทรคติ"]
    เดือนจันทรคติ_ชื่อ = lunar_data["เดือนจันทรคติ"]
    
    # แปลงชื่อวันเป็นตัวเลข
    วัน_แปลง = {
        'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 
        'Thursday': 5, 'Friday': 6, 'Saturday': 7,
        'อาทิตย์': 1, 'จันทร์': 2, 'อังคาร': 3, 'พุธ': 4,
        'พฤหัสบดี': 5, 'ศุกร์': 6, 'เสาร์': 7
    }
    
    วันในสัปดาห์_num = วัน_แปลง.get(วันในสัปดาห์, 1)
    ชื่อวัน = get_day_name(วันในสัปดาห์_num)
    
    # แปลงวันจันทรคติให้แสดงแบบเต็ม
    วันจันทรคติ_เต็ม = convert_lunar_day_full(วันจันทรคติ)
    
    # คำนวณอายุ
    อายุ_data = calculate_age(ปีเกิด, เดือน_เลข, วันที่)
    
    # แปลงชื่อเดือนจันทรคติเป็นตัวเลข
    เดือนจันทรคติ_num = convert_thai_lunar_month_to_number(เดือนจันทรคติ_ชื่อ)
    
    # หาชื่อเดือนจันทรคติ - ตรวจสอบเงื่อนไขพิเศษสำหรับ "เดือนแปดหลัง"
    if เดือนจันทรคติ_ชื่อ == "เดือนแปดหลัง":
        เดือนจันทรคติ_ชื่อ_แสดง = "เดือน 88"
    else:
        เดือนจันทรคติ_ชื่อ_แสดง = get_lunar_month_name(เดือนจันทรคติ_num, ปีเกิด)
    
    # ตรวจสอบว่าเป็นวันพุธหรือไม่ สำหรับการคำนวณพิเศษ
    เป็นวันพุธ = (วันในสัปดาห์_num == 4) or (วันในสัปดาห์ in ['Wednesday', 'พุธ'])
    
    # การคำนวณเวลา: ใช้ช่วงเวลาเฉพาะวันพุธ วันอื่นใช้ค่าปกติ (กลางวัน)
    ช่วงเวลาที่ใช้ = ช่วงเวลา if เป็นวันพุธ else "กลางวัน"
    
    # ตรวจสอบข้างขึ้น/ข้างแรมจากข้อมูลวันจันทรคติเดิม
    ข้างขึ้น = False
    if 'ข' in วันจันทรคติ:  # ข้างขึ้น
        ข้างขึ้น = True
    elif 'ร' in วันจันทรคติ:  # ข้างแรม
        ข้างขึ้น = False
    
    # เลือกข้อมูลตามข้างขึ้น/ข้างแรม
    ข้างคำ = "ข้างขึ้น" if ข้างขึ้น else "ข้างแรม"
    
    # คำนวณธาตุเจ้าเรือนรอง (จากเดือนจันทรคติปกติ)
    hypothesis_data_รอง = get_hypothesis_from_lunar_calendar(เดือนจันทรคติ_num, วันจันทรคติ)
    ธาตุเจ้าเรือนรอง = hypothesis_data_รอง["ธาตุ"]
    สมมุติฐานรอง = hypothesis_data_รอง["สมมุติฐาน"]
    แปรผลรอง = hypothesis_data_รอง["แปรผล"]
    ระดับธาตุรอง = get_element_level(สมมุติฐานรอง)
    
    # คำนวณธาตุเจ้าเรือนหลัก (นำเดือนจันทรคติเดิมมาลบด้วยอายุครรภ์)
    เดือนธาตุหลัก = เดือนจันทรคติ_num - อายุครรภ์
    while เดือนธาตุหลัก <= 0:
        เดือนธาตุหลัก += 12
    while เดือนธาตุหลัก > 12:
        เดือนธาตุหลัก -= 12
    
    # หาข้อมูลธาตุเจ้าเรือนหลักจากเดือนที่คำนวณได้
    hypothesis_data_หลัก = get_hypothesis_from_lunar_calendar(เดือนธาตุหลัก, วันจันทรคติ)
    ธาตุเจ้าเรือนหลัก = hypothesis_data_หลัก["ธาตุ"]
    สมมุติฐานหลัก = hypothesis_data_หลัก["สมมุติฐาน"]
    แปรผลหลัก = hypothesis_data_หลัก["แปรผล"]
    ระดับธาตุหลัก = get_element_level(สมมุติฐานหลัก)
    
    # หาข้อมูลดาวประจำวัน
    ดาวประจำวัน = get_planetary_day_info(วันในสัปดาห์_num, ช่วงเวลาที่ใช้)
    ข้อมูลสุขภาพดาว = get_planetary_health_characteristics(ดาวประจำวัน)
    
    # สร้างผลลัพธ์
    result = "="*60 + "\n"
    result += f"จันทรคติ\t\t{ชื่อวัน} {วันจันทรคติ_เต็ม} {เดือนจันทรคติ_ชื่อ_แสดง} ปีนักษัตร{ปีนักษัตร}\n"
    result += "="*60 + "\n"
    
    result += f"อายุ\t\t\t{อายุ_data['years']} ปี {อายุ_data['months']} เดือน {อายุ_data['days']} วัน\n"
    
    # เพิ่มข้อมูลช่วงเวลา (แสดงเฉพาะเมื่อเป็นวันพุธ)
    if เป็นวันพุธ:
        ข้อมูลเวลา = "กลางวัน (00:00-18:00 น.)" if ช่วงเวลาที่ใช้ == "กลางวัน" else "กลางคืน (18:00-24:00 น.)"
        result += f"ช่วงเวลาเกิด\t\t{ข้อมูลเวลา}\n"
        if ช่วงเวลาที่ใช้ == "กลางคืน":
            result += f"หมายเหตุ\t\t\tวันพุธกลางคืน (ใช้ดาวราหูแทนดาวพุธ)\n"
        else:
            result += f"หมายเหตุ\t\t\tวันพุธกลางวัน (ใช้ดาวพุธ)\n"
    else:
        result += f"หมายเหตุ\t\t\tใช้ค่าปกติ (ไม่ใช่วันพุธ)\n"
    
    result += "="*60 + "\n"
    
    # เพิ่มข้อมูลดาวประจำวัน
    result += f"ธาตุวัน\t\t\t{ดาวประจำวัน}\n"
    result += f"อวัยวะที่ควรดูแล\t\t{ข้อมูลสุขภาพดาว['อวัยวะหลัก']}\n"
    result += f"โรคที่อาจเกิดขึ้น\t\t{ข้อมูลสุขภาพดาว['โรคที่เกี่ยวข้อง']}\n"
    result += "="*60 + "\n"
    
    result += f"ธาตุเจ้าเรือนหลัก\t\t{ธาตุเจ้าเรือนหลัก}\n"
    # result += f"คลาสธาตุหลัก\t\t{คลาสธาตุหลัก}\n"
    result += f"ธาตุเจ้าเรือนรอง\t\t{ธาตุเจ้าเรือนรอง}\n"
    result += "="*60 + "\n"
    
    result += f"สมมุติฐานหลัก\t\t{สมมุติฐานหลัก}\n"
    result += f"ระดับธาตุหลัก\t\t{ระดับธาตุหลัก}\n"
    result += f"แปรผลหลัก\t\t{แปรผลหลัก}\n"
    result += "-"*60 + "\n"
    result += f"สมมุติฐานรอง\t\t{สมมุติฐานรอง}\n"
    result += f"ระดับธาตุรอง\t\t{ระดับธาตุรอง}\n"
    result += f"แปรผลรอง\t\t{แปรผลรอง}\n"
    result += "="*60
    
    return result

def check_python_version():
    """
    ตรวจสอบและแสดงเวอร์ชัน Python
    """
    print("=== ข้อมูลเวอร์ชัน Python ===")
    print(f"Python Version: {sys.version}")
    print(f"Python Version Info: {sys.version_info}")
    print(f"Python Executable: {sys.executable}")
    print("="*50)

def check_psycopg2_installation():
    """
    ตรวจสอบการติดตั้ง psycopg2 และแสดงข้อมูลเวอร์ชัน
    """
    try:
        print("=== ข้อมูลการติดตั้ง psycopg2 ===")
        print(f"psycopg2 Version: {psycopg2.__version__}")
        print(f"psycopg2 Module Path: {psycopg2.__file__}")
        
        # ตรวจสอบ libpq version (PostgreSQL client library)
        conn_test = psycopg2.connect("host=localhost user=test")  # จำลองการเชื่อมต่อ
    except psycopg2.OperationalError:
        # คาดหวังว่าจะเกิด error เพราะไม่มี host=localhost 
        print("[OK] psycopg2 สามารถสร้าง connection object ได้")
    except Exception as e:
        print(f"[ERROR] ปัญหาการติดตั้ง psycopg2: {e}")
        return False
    
    print("[OK] psycopg2 ติดตั้งและทำงานได้ปกติ")
    print("="*50)
    return True

def run_service():
    """ฟังก์ชันหลักสำหรับรันเป็น service ด้วย PM2"""
    global running
    
    logger.info("=== Thai Lunar Calendar Service Started ===")
    logger.info("Service is running in PM2 mode...")
    
    # ทดสอบการเชื่อมต่อฐานข้อมูลตอนเริ่มต้น
    if not test_database_connection():
        logger.error("Failed to connect to database. Service will exit.")
        return False
    
    # ตรวจสอบการติดตั้ง psycopg2
    if not check_psycopg2_installation():
        logger.error("psycopg2 installation check failed. Service will exit.")
        return False
    
    logger.info("All checks passed. Service is ready.")
    
    # Main service loop
    while running:
        try:
            # ทำงานบางอย่างหรือรอ
            time.sleep(10)  # รอ 10 วินาที
            
            # ทดสอบการเชื่อมต่อฐานข้อมูลเป็นระยะ (ทุก 5 นาที)
            if int(time.time()) % 300 == 0:  # ทุก 5 นาที
                logger.info("Periodic database connection check...")
                test_database_connection()
                
        except Exception as e:
            logger.error(f"Error in service loop: {e}")
            time.sleep(5)  # รอ 5 วินาทีก่อนลองใหม่
    
    logger.info("Service stopped gracefully.")
    return True

def is_pm2_mode():
    """ตรวจสอบว่าถูกรันด้วย PM2 หรือไม่"""
    return 'PM2_HOME' in os.environ or len(sys.argv) > 1 and '--pm2' in sys.argv

if __name__ == "__main__":
    # ตรวจสอบว่าถูกรันด้วย PM2 หรือไม่
    if is_pm2_mode():
        # รันเป็น service สำหรับ PM2
        logger.info("Starting in PM2 service mode...")
        try:
            success = run_service()
            sys.exit(0 if success else 1)
        except Exception as e:
            logger.error(f"Service failed: {e}")
            sys.exit(1)
    else:
        # รันแบบ interactive mode
        # แสดงตำแหน่งไฟล์เมื่อรันโปรแกรม
        print(f"ไฟล์โปรแกรม: {os.path.abspath(__file__)}")
        print(f"โฟลเดอร์ทำงาน: {os.getcwd()}")
        
        # ตรวจสอบเวอร์ชัน Python
        check_python_version()
        
        # ตรวจสอบการติดตั้ง psycopg2
        if not check_psycopg2_installation():
            print("มีปัญหาการติดตั้ง psycopg2 กรุณาตรวจสอบ")
        input("กด Enter เพื่อปิดโปรแกรม...")
        exit()
    
    print("=== ระบบคำนวณจันทรคติไทย ===")
    print(f"ไฟล์ตั้งอยู่ที่: {os.path.abspath(__file__)}")
    
    # ทดสอบการเชื่อมต่อฐานข้อมูลก่อน
    if not test_database_connection():
        print("ไม่สามารถเชื่อมต่อฐานข้อมูลได้ กรุณาตรวจสอบการตั้งค่า")
        input("กด Enter เพื่อปิดโปรแกรม...")
        exit()
    
    print("\n" + "="*50)

    try:
        # ผู้ใช้กรอกวันที่แยกเป็น วัน เดือน ปี
        วัน = input("ป้อนวันที่ (1-31): ")
        เดือน_เลข = input("ป้อนเดือน (1-12): ")
        ปี = input("ป้อนปี พ.ศ. (เช่น 2520): ")
        
        # ถามอายุครรภ์
        print("\n=== เลือกอายุครรภ์ ===")
        print("9 = คลอดปกติ (9 เดือน)")
        print("8 = ผ่าคลอด (8 เดือน)")
        print("7 = ผ่าคลอด (7 เดือน)")
        print("0 = จำไม่ได้")
        
        อายุครรภ์_input = input("อายุครรภ์ (7,8,9,0): ")
        
        try:
            อายุครรภ์ = int(อายุครรภ์_input)
            if อายุครรภ์ < 0 or อายุครรภ์ > 12:
                print("กรุณาป้อนตัวเลขระหว่าง 0-12")
                exit()
        except ValueError:
            print("กรุณาป้อนตัวเลขที่ถูกต้อง")
            exit()
        
        # ถ้าเลือก 0 (จำไม่ได้) ให้ใช้ค่า 9 เดือนในการคำนวณ
        if อายุครรภ์ == 0:
            อายุครรภ์ = 9
        
        # ถามช่วงเวลาเกิด
        print("\n=== เลือกช่วงเวลาที่เกิด ===")
        print("1 = กลางวัน (00:00-18:00 น.)")
        print("2 = กลางคืน (18:00-24:00 น.)")
        print("หมายเหตุ: ช่วงเวลาจะมีผลเฉพาะวันพุธเท่านั้น")
        
        ช่วงเวลา_input = input("ช่วงเวลาเกิด (1,2): ")
        
        try:
            ช่วงเวลา_เลข = int(ช่วงเวลา_input)
            if ช่วงเวลา_เลข not in [1, 2]:
                print("กรุณาเลือก 1 หรือ 2")
                exit()
        except ValueError:
            print("กรุณาป้อนตัวเลขที่ถูกต้อง")
            exit()
        
        # ประมวลผลช่วงเวลา
        ช่วงเวลา = "กลางวัน" if ช่วงเวลา_เลข == 1 else "กลางคืน"
        
        # ตรวจสอบและแปลงข้อมูลที่กรอก
        try:
            วัน = int(วัน)
            เดือน_เลข = int(เดือน_เลข)
            ปี = int(ปี)
            
            if not (1 <= วัน <= 31):
                print("วันต้องอยู่ระหว่าง 1-31")
                exit()
            
            if not (1 <= เดือน_เลข <= 12):
                print("เดือนต้องอยู่ระหว่าง 1-12")
                exit()
            
        except ValueError:
            print("กรุณาป้อนตัวเลขที่ถูกต้อง")
            exit()

        print(f"\nกำลังคำนวณ: วันที่ {วัน} เดือน {เดือน_เลข} พ.ศ. {ปี}")
        print(f"อายุครรภ์: {อายุครรภ์} เดือน")
        print(f"ช่วงเวลา: {ช่วงเวลา}")

        # คำนวณข้อมูลจันทรคติ
        ผลลัพธ์ = calculate_thai_lunar_calendar(ปี, เดือน_เลข, วัน, อายุครรภ์, ช่วงเวลา)
        print(f"\n{ผลลัพธ์}")
    
    except KeyboardInterrupt:
        print("\nโปรแกรมถูกยกเลิก")
        input("กด Enter เพื่อปิดโปรแกรม...")
    except Exception as e:
        print(f"เกิดข้อผิดพลาด: {e}")
        input("กด Enter เพื่อปิดโปรแกรม...")

def run_service():
    """ฟังก์ชันหลักสำหรับรันเป็น service ด้วย PM2"""
    global running
    
    logger.info("=== Thai Lunar Calendar Service Started ===")
    logger.info("Service is running in PM2 mode...")
    
    # ทดสอบการเชื่อมต่อฐานข้อมูลตอนเริ่มต้น
    if not test_database_connection():
        logger.error("Failed to connect to database. Service will exit.")
        return False
    
    # ตรวจสอบการติดตั้ง psycopg2
    if not check_psycopg2_installation():
        logger.error("psycopg2 installation check failed. Service will exit.")
        return False
    
    logger.info("All checks passed. Service is ready.")
    
    # Main service loop
    while running:
        try:
            # ทำงานบางอย่างหรือรอ
            time.sleep(10)  # รอ 10 วินาที
            
            # ทดสอบการเชื่อมต่อฐานข้อมูลเป็นระยะ (ทุก 5 นาที)
            if int(time.time()) % 300 == 0:  # ทุก 5 นาที
                logger.info("Periodic database connection check...")
                test_database_connection()
                
        except Exception as e:
            logger.error(f"Error in service loop: {e}")
            time.sleep(5)  # รอ 5 วินาทีก่อนลองใหม่
    
    logger.info("Service stopped gracefully.")
    return True

# เช็คว่าถูกรันด้วย PM2 หรือไม่
def is_pm2_mode():
    """ตรวจสอบว่าถูกรันด้วย PM2 หรือไม่"""
    return 'PM2_HOME' in os.environ or len(sys.argv) > 1 and '--pm2' in sys.argv
