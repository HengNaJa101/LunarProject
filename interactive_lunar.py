import psycopg2
from datetime import datetime
import os
import sys
import signal
import time
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
running = True

def signal_handler(signum, frame):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ signal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û"""
    global running
    logger.info(f"Received signal {signum}, shutting down gracefully...")
    running = False

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô signal handlers
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
DB_CONFIG = {
    'host': 'Chainchinjung.3bbddns.com',
    'port': 57721,
    'database': 'thai-hub',
    'user': 'thaiHub',
    'password': 'thaiHubPassword'
}

# Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å FinishLunar.py
from FinishLunar import (
    calculate_thai_lunar_calendar, 
    test_database_connection,
    check_psycopg2_installation
)

def get_input_with_default(prompt, default_value=""):
    """‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏° default value"""
    if default_value:
        user_input = input(f"{prompt} [default: {default_value}]: ").strip()
        return user_input if user_input else default_value
    return input(prompt).strip()

def run_interactive_session():
    """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ö‡∏ö interactive ‡∏ú‡πà‡∏≤‡∏ô PM2"""
    logger.info("Starting Interactive Lunar Calendar Session...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if not test_database_connection():
        logger.error("Database connection failed")
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö psycopg2
    if not check_psycopg2_installation():
        logger.error("psycopg2 check failed")
        return False
    
    session_count = 0
    
    while running:
        try:
            session_count += 1
            logger.info(f"=== Session {session_count} ===")
            
            # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            print("\nüåô ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏±‡∏ô‡∏ó‡∏£‡∏Ñ‡∏ï‡∏¥‡πÑ‡∏ó‡∏¢")
            print("=" * 50)
            
            # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î
            ‡∏ß‡∏±‡∏ô = get_input_with_default("‡∏õ‡πâ‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (1-31)", "15")
            ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = get_input_with_default("‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (1-12)", "5")  
            ‡∏õ‡∏µ = get_input_with_default("‡∏õ‡πâ‡∏≠‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.", "2520")
            
            # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå
            print("\n=== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå ===")
            print("9 = ‡∏Ñ‡∏•‡∏≠‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (9 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
            print("8 = ‡∏ú‡πà‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î (8 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")  
            print("7 = ‡∏ú‡πà‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î (7 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
            print("0 = ‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå = get_input_with_default("‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå (7,8,9,0)", "9")
            
            # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            print("\n=== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î ===")
            print("1 = ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (00:00-18:00 ‡∏ô.)")
            print("2 = ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (18:00-24:00 ‡∏ô.)")
            ‡πÄ‡∏ß‡∏•‡∏≤_choice = get_input_with_default("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î (1,2)", "1")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            try:
                ‡∏ß‡∏±‡∏ô = int(‡∏ß‡∏±‡∏ô)
                ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = int(‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                ‡∏õ‡∏µ = int(‡∏õ‡∏µ)
                ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå = int(‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå)
                
                if ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå == 0:
                    ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå = 9
                    
                ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ = "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô" if int(‡πÄ‡∏ß‡∏•‡∏≤_choice) == 1 else "‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤
                if not (1 <= ‡∏ß‡∏±‡∏ô <= 31):
                    raise ValueError("‡∏ß‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-31")
                if not (1 <= ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô <= 12):
                    raise ValueError("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-12")
                if not (2400 <= ‡∏õ‡∏µ <= 2600):
                    raise ValueError("‡∏õ‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2400-2600")
                    
            except ValueError as e:
                logger.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}")
                continue
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            logger.info(f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {‡∏ß‡∏±‡∏ô}/{‡πÄ‡∏î‡∏∑‡∏≠‡∏ô}/{‡∏õ‡∏µ}, ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå: {‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå}, ‡πÄ‡∏ß‡∏•‡∏≤: {‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤}")
            
            ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå = calculate_thai_lunar_calendar(‡∏õ‡∏µ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏ß‡∏±‡∏ô, ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏£‡∏£‡∏†‡πå, ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
            
            print("\n" + "="*60)
            print("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:")
            print("="*60)
            print(‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
            print("="*60)
            
            # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            print("\n‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:")
            print("1 = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà")
            print("2 = ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            choice = get_input_with_default("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1,2)", "1")
            
            if choice == "2":
                logger.info("User requested to exit")
                break
                
            # ‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            time.sleep(1)
            
        except KeyboardInterrupt:
            logger.info("Received Ctrl+C, shutting down...")
            break
        except Exception as e:
            logger.error(f"Error in session: {e}")
            time.sleep(2)
    
    logger.info("Interactive session ended")
    return True

def run_background_service():
    """‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô background service"""
    logger.info("Starting Background Service Mode...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    if not test_database_connection():
        logger.error("Database connection failed")
        return False
    
    if not check_psycopg2_installation():
        logger.error("psycopg2 check failed") 
        return False
    
    logger.info("Service is ready and running...")
    
    # Service loop
    while running:
        try:
            time.sleep(30)  # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DB ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            if int(time.time()) % 300 == 0:
                logger.info("Periodic database check...")
                test_database_connection()
                
        except Exception as e:
            logger.error(f"Service error: {e}")
            time.sleep(5)
    
    logger.info("Background service stopped")
    return True

def is_pm2_mode():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PM2"""
    return 'PM2_HOME' in os.environ or '--pm2' in sys.argv

def is_interactive_mode():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô interactive mode"""
    return '--interactive' in sys.argv or '-i' in sys.argv

if __name__ == "__main__":
    logger.info("Thai Lunar Calendar Application Starting...")
    
    try:
        if is_pm2_mode():
            if is_interactive_mode():
                # PM2 Interactive Mode
                logger.info("Starting PM2 Interactive Mode...")
                success = run_interactive_session()
            else:
                # PM2 Background Service Mode
                logger.info("Starting PM2 Background Service Mode...")  
                success = run_background_service()
            
            sys.exit(0 if success else 1)
        else:
            # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (non-PM2)
            logger.info("Starting Normal Mode...")
            success = run_interactive_session()
            sys.exit(0 if success else 1)
            
    except Exception as e:
        logger.error(f"Application failed: {e}")
        sys.exit(1)